// automatically generated by the FlatBuffers compiler, do not modify

package com.adam.adventure.lib.flatbuffer.schema.packet;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class WorldStatePacket extends Table {
  public static WorldStatePacket getRootAsWorldStatePacket(ByteBuffer _bb) { return getRootAsWorldStatePacket(_bb, new WorldStatePacket()); }
  public static WorldStatePacket getRootAsWorldStatePacket(ByteBuffer _bb, WorldStatePacket obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public WorldStatePacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SceneInfo activeScene() { return activeScene(new SceneInfo()); }
  public SceneInfo activeScene(SceneInfo obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public PlayerInfo players(int j) { return players(new PlayerInfo(), j); }
  public PlayerInfo players(PlayerInfo obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int playersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createWorldStatePacket(FlatBufferBuilder builder,
      int activeSceneOffset,
      int playersOffset) {
    builder.startObject(2);
    WorldStatePacket.addPlayers(builder, playersOffset);
    WorldStatePacket.addActiveScene(builder, activeSceneOffset);
    return WorldStatePacket.endWorldStatePacket(builder);
  }

  public static void startWorldStatePacket(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addActiveScene(FlatBufferBuilder builder, int activeSceneOffset) { builder.addOffset(0, activeSceneOffset, 0); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(1, playersOffset, 0); }
  public static int createPlayersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endWorldStatePacket(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

